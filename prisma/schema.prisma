generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Recipe {
  id           String             @id @default(uuid())
  title        String
  description  String
  creationDate DateTime           @default(now())
  servings     Int
  rating       Float?
  calories     Float
  imageId      String?
  userId       String
  cookingTime  CookingTime?
  Favorite     Favorite[]
  nutrients    Nutrients?
  image        File?              @relation(fields: [imageId], references: [id])
  user         User               @relation(fields: [userId], references: [id])
  categories   RecipeCategory[]
  reviews      Review[]

  @@index([id])
  @@index([title, description])
}

model Review {
  id           String   @id @default(uuid())
  rating       Float
  comment      String
  creationDate DateTime @default(now())
  recipeId     String
  userId       String
  recipe       Recipe   @relation(fields: [recipeId], references: [id])
  user         User     @relation(fields: [userId], references: [id])

  @@index([id])
}

model CookingTime {
  value    Float
  unit     String
  recipeId String @unique
  recipe   Recipe @relation(fields: [recipeId], references: [id])
}

model Category {
  name           String           @id
  RecipeCategory RecipeCategory[]
}

model RecipeCategory {
  id           String   @id @default(uuid())
  recipeId     String
  categoryName String
  category     Category @relation(fields: [categoryName], references: [name])
  recipe       Recipe   @relation(fields: [recipeId], references: [id])

  @@index([recipeId])
}

model Nutrients {
  id       String @id @default(uuid())
  fat      Float
  protein  Float
  carbs    Float
  recipeId String @unique
  recipe   Recipe @relation(fields: [recipeId], references: [id])

  @@index([recipeId])
}

model Favorite {
  recipeId String
  userId   String
  Recipe   Recipe @relation(fields: [recipeId], references: [id])
  User     User   @relation(fields: [userId], references: [id])

  @@unique([recipeId, userId])
  @@index([recipeId, userId])
}

model File {
  id       String   @id @default(uuid())
  filename String
  path     String
  mimetype String
  Recipe   Recipe[]

  @@index([id])
}

model User {
  id                        String     @id @default(uuid())
  email                     String     @unique
  name                      String
  password                  String
  creationDate              DateTime   @default(now())
  currentHashedRefreshToken String?
  Favorite                  Favorite[]
  Recipe                    Recipe[]
  Review                    Review[]

  @@index([id])
  @@index([email])
}
